// Generated by CoffeeScript 1.7.1
(function() {
  var Replacer, plus, toPromise,
    __slice = [].slice;

  plus = require('./plus');

  toPromise = require('./helper-promise').toPromise;

  Replacer = (function() {
    function Replacer(_request) {
      this._request = _request;
    }

    Replacer.prototype.uncamelize = function(obj) {
      var i, key, o, value;
      if (Array.isArray(obj)) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            i = obj[_i];
            _results.push(this.uncamelize(i));
          }
          return _results;
        }).call(this);
      } else if (obj === Object(obj)) {
        o = {};
        for (key in obj) {
          value = obj[key];
          o[plus.uncamelize(key)] = this.uncamelize(value);
        }
        return o;
      } else {
        return obj;
      }
    };

    Replacer.prototype.replace = function(o) {
      if (Array.isArray(o)) {
        return this._replaceArray(o);
      } else if (o === Object(o)) {
        return this._replaceObject(o);
      } else {
        return o;
      }
    };

    Replacer.prototype._replaceObject = function(orig) {
      var acc, key, value;
      acc = {};
      for (key in orig) {
        value = orig[key];
        this._replaceKeyValue(acc, key, value);
      }
      return acc;
    };

    Replacer.prototype._replaceArray = function(orig) {
      var arr, item, key, value;
      arr = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = orig.length; _i < _len; _i++) {
          item = orig[_i];
          _results.push(this.replace(item));
        }
        return _results;
      }).call(this);
      for (key in orig) {
        value = orig[key];
        if (typeof key === 'string') {
          this._replaceKeyValue(arr, key, value);
        }
      }
      return arr;
    };

    Replacer.prototype._replaceKeyValue = function(acc, key, value) {
      var fn, newKey;
      if (/_url$/.test(key)) {
        fn = (function(_this) {
          return function() {
            var args, cb, i, m, match, param;
            cb = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            i = 0;
            while (m = /(\{[^\}]+\})/.exec(value)) {
              match = m[1];
              if (i < args.length) {
                param = args[i];
                if (match[1] === '/') {
                  param = "/" + param;
                }
              } else {
                param = '';
                if (match[1] !== '/') {
                  throw new Error("BUG: Missing required parameter " + match);
                }
              }
              value = value.replace(match, param);
              i++;
            }
            return _this._request('GET', value, null, null, cb);
          };
        })(this);
        fn = toPromise(fn);
        fn.url = value;
        newKey = key.substring(0, key.length - '_url'.length);
        return acc[plus.camelize(newKey)] = fn;
      } else if (/_at$/.test(key)) {
        return acc[plus.camelize(key)] = new Date(value);
      } else {
        return acc[plus.camelize(key)] = this.replace(value);
      }
    };

    return Replacer;

  })();

  module.exports = Replacer;

}).call(this);
